import java.util.Scanner;
import java.util.Random;

public class Puzzle {
    private static int[][] puzzle = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 0}  // 0 represents the empty space
    };
    private static final int EMPTY = 0;

    public static void main(String[] args) {
        shufflePuzzle();
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to the Console Puzzle Game!");

        while (true) {
            printPuzzle();
            if (isSolved()) {
                System.out.println("Congratulations! You solved the puzzle.");
                break;
            }

            System.out.println("Enter your move (u: up, d: down, l: left, r: right): ");
            String move = scanner.nextLine();
            if (!makeMove(move)) {
                System.out.println("Invalid move. Try again.");
            }
        }

        scanner.close();
    }

    // Shuffles the puzzle to make it more challenging
    private static void shufflePuzzle() {
        Random random = new Random();
        for (int i = 0; i < 100; i++) {
            int move = random.nextInt(4);
            switch (move) {
                case 0: makeMove("u"); break;
                case 1: makeMove("d"); break;
                case 2: makeMove("l"); break;
                case 3: makeMove("r"); break;
            }
        }
    }

    // Prints the current state of the puzzle
    private static void printPuzzle() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (puzzle[i][j] == EMPTY) {
                    System.out.print("   ");  // Empty space
                } else {
                    System.out.print(" " + puzzle[i][j] + " ");
                }
            }
            System.out.println();
        }
    }

    // Checks if the puzzle is in the solved state
    private static boolean isSolved() {
        int[][] solvedPuzzle = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 0}
        };
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (puzzle[i][j] != solvedPuzzle[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }

    // Makes a move based on user input (u, d, l, r)
    private static boolean makeMove(String direction) {
        int row = 0, col = 0;

        // Find the empty space (0)
        outerloop:
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (puzzle[i][j] == EMPTY) {
                    row = i;
                    col = j;
                    break outerloop;
                }
            }
        }

        // Perform the move
        switch (direction) {
            case "u": // Move up
                if (row > 0) {
                    puzzle[row][col] = puzzle[row - 1][col];
                    puzzle[row - 1][col] = EMPTY;
                    return true;
                }
                break;
            case "d": // Move down
                if (row < 2) {
                    puzzle[row][col] = puzzle[row + 1][col];
                    puzzle[row + 1][col] = EMPTY;
                    return true;
                }
                break;
            case "l": // Move left
                if (col > 0) {
                    puzzle[row][col] = puzzle[row][col - 1];
                    puzzle[row][col - 1] = EMPTY;
                    return true;
                }
                break;
            case "r": // Move right
                if (col < 2) {
                    puzzle[row][col] = puzzle[row][col + 1];
                    puzzle[row][col + 1] = EMPTY;
                    return true;
                }
                break;
            default:
                return false;
        }
        return false;
    }
}
